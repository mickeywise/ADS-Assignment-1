{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Pandas\n",
        "\n",
        "### Instructions\n",
        "\n",
        "This assignment will be done completely inside this Jupyter notebook with answers placed in the cell provided.\n",
        "\n",
        "All python imports that are needed shown.\n",
        "\n",
        "Follow all the instructions in this notebook to complete these tasks.    \n",
        "\n",
        "Make sure the CSV data files is in the same folder as this notebook - alumni.csv, groceries.csv"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Imports needed to complete this assignment\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "%matplotlib inline"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1619612344603
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1 :  Import CSV file (1 Mark)\n",
        "\n",
        "\n",
        "Write code to load the alumni csv dataset into a Pandas DataFrame called 'alumni'.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#q1 (1)\n",
        "alumni = pd.read_csv(\"alumni.csv\")"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1619612345117
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 2 :  Understand the data set (5 Marks)\n",
        "\n",
        "Use the following pandas commands to understand the data set: a) head, b) tail, c) dtypes, d) info, e) describe "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (1)\n",
        "alumni.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "   Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n0            2004    Male         Single      Standard Diploma       Yes   \n1            2005    Male        Married  College Prep Diploma        No   \n2            2006  Female         Single      Standard Diploma       Yes   \n3            2007    Male        Married      Standard Diploma        No   \n4            2006  Female       Divorced      Standard Diploma       Yes   \n\n   Salary    Fee Savings ($)  \n0  125000  10869     $86,000  \n1  100000  10869    $116,000  \n2   70000  10869     $52,000  \n3  120000  10869     $76,000  \n4   95000  11948     $52,000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2004</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>125000</td>\n      <td>10869</td>\n      <td>$86,000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2005</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>College Prep Diploma</td>\n      <td>No</td>\n      <td>100000</td>\n      <td>10869</td>\n      <td>$116,000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>70000</td>\n      <td>10869</td>\n      <td>$52,000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>120000</td>\n      <td>10869</td>\n      <td>$76,000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>95000</td>\n      <td>11948</td>\n      <td>$52,000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1619612345487
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "alumni.tail()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "    Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n83            2007    Male         Single      Standard Diploma        No   \n84            2008       M         Single  College Prep Diploma       Yes   \n85            2009    Male        Married      Standard Diploma        No   \n86            2005  Female       Divorced      Standard Diploma       Yes   \n87            2006    Male        Married      Standard Diploma       Yes   \n\n    Salary    Fee Savings ($)  \n83   75000  12066     $16,000  \n84   65000  12066     $72,000  \n85   75000  12066     $46,000  \n86  100000  12067     $32,000  \n87   75000  12067     $67,000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>83</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$16,000</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>2008</td>\n      <td>M</td>\n      <td>Single</td>\n      <td>College Prep Diploma</td>\n      <td>Yes</td>\n      <td>65000</td>\n      <td>12066</td>\n      <td>$72,000</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>2009</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$46,000</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>2005</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>100000</td>\n      <td>12067</td>\n      <td>$32,000</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2006</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>75000</td>\n      <td>12067</td>\n      <td>$67,000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1619612345877
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#c) (1)\n",
        "alumni.dtypes"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "Year Graduated     int64\nGender            object\nMarital Status    object\nDiploma Type      object\nDefaulted         object\nSalary             int64\nFee                int64\nSavings ($)       object\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1619612346277
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#d) (1)\n",
        "alumni.info()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 88 entries, 0 to 87\n",
            "Data columns (total 8 columns):\n",
            "Year Graduated    88 non-null int64\n",
            "Gender            88 non-null object\n",
            "Marital Status    88 non-null object\n",
            "Diploma Type      88 non-null object\n",
            "Defaulted         88 non-null object\n",
            "Salary            88 non-null int64\n",
            "Fee               88 non-null int64\n",
            "Savings ($)       88 non-null object\n",
            "dtypes: int64(3), object(5)\n",
            "memory usage: 5.6+ KB\n"
          ]
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1619612349101
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#e) (1)\n",
        "alumni.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "       Year Graduated         Salary           Fee\ncount       88.000000      88.000000     88.000000\nmean      2006.477273   84090.909091  11708.727273\nstd          1.560852   21234.128008   1110.647949\nmin       2004.000000   35000.000000  10869.000000\n25%       2005.000000   75000.000000  10968.000000\n50%       2006.500000   75000.000000  11696.000000\n75%       2008.000000   90000.000000  12058.250000\nmax       2009.000000  160000.000000  20960.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Salary</th>\n      <th>Fee</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>88.000000</td>\n      <td>88.000000</td>\n      <td>88.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2006.477273</td>\n      <td>84090.909091</td>\n      <td>11708.727273</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.560852</td>\n      <td>21234.128008</td>\n      <td>1110.647949</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2004.000000</td>\n      <td>35000.000000</td>\n      <td>10869.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2005.000000</td>\n      <td>75000.000000</td>\n      <td>10968.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2006.500000</td>\n      <td>75000.000000</td>\n      <td>11696.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2008.000000</td>\n      <td>90000.000000</td>\n      <td>12058.250000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2009.000000</td>\n      <td>160000.000000</td>\n      <td>20960.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1619612349647
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 3 :  Cleaning the data set - part A (3 Marks)\n",
        "\n",
        "a) Use clean_currency method below to strip out commas and dollar signs from Savings ($) column and put into a new column called 'Savings'."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "def clean_currency(curr):\n",
        "    return float(curr.replace(\",\", \"\").replace(\"$\", \"\"))\n",
        "\n",
        "clean_currency(\"$66,000\")\n",
        " "
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 8,
          "data": {
            "text/plain": "66000.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1619612350045
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (2)\n",
        "alumni[\"Savings\"] = alumni[\"Savings ($)\"].str.replace(\",\", \"\").str.replace(\"$\", \"\").astype(int)\n",
        "alumni"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "    Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n0             2004    Male         Single      Standard Diploma       Yes   \n1             2005    Male        Married  College Prep Diploma        No   \n2             2006  Female         Single      Standard Diploma       Yes   \n3             2007    Male        Married      Standard Diploma        No   \n4             2006  Female       Divorced      Standard Diploma       Yes   \n..             ...     ...            ...                   ...       ...   \n83            2007    Male         Single      Standard Diploma        No   \n84            2008       M         Single  College Prep Diploma       Yes   \n85            2009    Male        Married      Standard Diploma        No   \n86            2005  Female       Divorced      Standard Diploma       Yes   \n87            2006    Male        Married      Standard Diploma       Yes   \n\n    Salary    Fee Savings ($)  Savings  \n0   125000  10869     $86,000    86000  \n1   100000  10869    $116,000   116000  \n2    70000  10869     $52,000    52000  \n3   120000  10869     $76,000    76000  \n4    95000  11948     $52,000    52000  \n..     ...    ...         ...      ...  \n83   75000  12066     $16,000    16000  \n84   65000  12066     $72,000    72000  \n85   75000  12066     $46,000    46000  \n86  100000  12067     $32,000    32000  \n87   75000  12067     $67,000    67000  \n\n[88 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n      <th>Savings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2004</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>125000</td>\n      <td>10869</td>\n      <td>$86,000</td>\n      <td>86000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2005</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>College Prep Diploma</td>\n      <td>No</td>\n      <td>100000</td>\n      <td>10869</td>\n      <td>$116,000</td>\n      <td>116000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>70000</td>\n      <td>10869</td>\n      <td>$52,000</td>\n      <td>52000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>120000</td>\n      <td>10869</td>\n      <td>$76,000</td>\n      <td>76000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>95000</td>\n      <td>11948</td>\n      <td>$52,000</td>\n      <td>52000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$16,000</td>\n      <td>16000</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>2008</td>\n      <td>M</td>\n      <td>Single</td>\n      <td>College Prep Diploma</td>\n      <td>Yes</td>\n      <td>65000</td>\n      <td>12066</td>\n      <td>$72,000</td>\n      <td>72000</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>2009</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$46,000</td>\n      <td>46000</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>2005</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>100000</td>\n      <td>12067</td>\n      <td>$32,000</td>\n      <td>32000</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2006</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>75000</td>\n      <td>12067</td>\n      <td>$67,000</td>\n      <td>67000</td>\n    </tr>\n  </tbody>\n</table>\n<p>88 rows × 9 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1619612350447
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Uncomment 'alumni.dtypes.Savings' to check that the type change has occurred"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "alumni.dtypes.Savings"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "dtype('int64')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1619612350886
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4 :  Cleaning the data set - part B (5 Marks)\n",
        "\n",
        "a) Run the 'alumni[\"Gender\"].value_counts()' to see the incorrect 'M' fields that need to be converted to 'Male'"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# a) (1)\n",
        "alumni[\"Gender\"].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "Male      46\nFemale    39\nM          3\nName: Gender, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1619612351309
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Now use a '.str.replace' on the 'Gender' column to covert the incorrect 'M' fields. Hint: We must use ^...$ to restrict the pattern to match the whole string. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# b) (1)\n",
        "Gender = alumni[\"Gender\"].str.replace('(^M$)','Male')\n",
        "Gender"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "0       Male\n1       Male\n2     Female\n3       Male\n4     Female\n       ...  \n83      Male\n84      Male\n85      Male\n86    Female\n87      Male\nName: Gender, Length: 88, dtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1619612351730
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# b) (1)\n",
        "Gender.value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 13,
          "data": {
            "text/plain": "Male      49\nFemale    39\nName: Gender, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1619612352178
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "c) That didn't the set alumni[\"Gender\"] column however. You will need to update the column when using the replace command 'alumni[\"Gender\"]=<replace command>', show how this is done below"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# c) (1)\n",
        "alumni[\"Gender\"]= alumni[\"Gender\"].replace('M','Male')"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1619612352824
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) You can set it directly by using the df.loc command, show how this can be done by using the 'df.loc[row_indexer,col_indexer] = value' command to convert the 'M' to 'Male'"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# d) (1)\n",
        "alumni.loc[alumni.Gender =='M']= 'Male'"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1619612353237
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "e) Now run the 'value_counts' for Gender again to see the correct columns - 'Male' and 'Female' "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# e) (1)\n",
        "alumni[\"Gender\"].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "Male      49\nFemale    39\nName: Gender, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1619612353627
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 5 :  Working with the data set (4)\n",
        "\n",
        "a) get the median, b) mean and c) standard deviation for the 'Salary' column"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# a)(1)\n",
        "alumni.Salary.median()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "75000.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1619612354076
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# b)(1)\n",
        "alumni.Salary.mean()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "84090.90909090909"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1619612354486
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# c)(1)\n",
        "alumni.Salary.std()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "21234.128008173615"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1619612354925
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) identify which alumni paid more than $15000 in fees, using the 'Fee' column"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# d) (1)\n",
        "alumni[alumni.Fee < 15000]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "    Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n0             2004    Male         Single      Standard Diploma       Yes   \n1             2005    Male        Married  College Prep Diploma        No   \n2             2006  Female         Single      Standard Diploma       Yes   \n3             2007    Male        Married      Standard Diploma        No   \n4             2006  Female       Divorced      Standard Diploma       Yes   \n..             ...     ...            ...                   ...       ...   \n83            2007    Male         Single      Standard Diploma        No   \n84            2008    Male         Single  College Prep Diploma       Yes   \n85            2009    Male        Married      Standard Diploma        No   \n86            2005  Female       Divorced      Standard Diploma       Yes   \n87            2006    Male        Married      Standard Diploma       Yes   \n\n    Salary    Fee Savings ($)  Savings  \n0   125000  10869     $86,000    86000  \n1   100000  10869    $116,000   116000  \n2    70000  10869     $52,000    52000  \n3   120000  10869     $76,000    76000  \n4    95000  11948     $52,000    52000  \n..     ...    ...         ...      ...  \n83   75000  12066     $16,000    16000  \n84   65000  12066     $72,000    72000  \n85   75000  12066     $46,000    46000  \n86  100000  12067     $32,000    32000  \n87   75000  12067     $67,000    67000  \n\n[87 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n      <th>Savings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2004</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>125000</td>\n      <td>10869</td>\n      <td>$86,000</td>\n      <td>86000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2005</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>College Prep Diploma</td>\n      <td>No</td>\n      <td>100000</td>\n      <td>10869</td>\n      <td>$116,000</td>\n      <td>116000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>70000</td>\n      <td>10869</td>\n      <td>$52,000</td>\n      <td>52000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>120000</td>\n      <td>10869</td>\n      <td>$76,000</td>\n      <td>76000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>95000</td>\n      <td>11948</td>\n      <td>$52,000</td>\n      <td>52000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$16,000</td>\n      <td>16000</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>2008</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>College Prep Diploma</td>\n      <td>Yes</td>\n      <td>65000</td>\n      <td>12066</td>\n      <td>$72,000</td>\n      <td>72000</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>2009</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$46,000</td>\n      <td>46000</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>2005</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>100000</td>\n      <td>12067</td>\n      <td>$32,000</td>\n      <td>32000</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2006</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>75000</td>\n      <td>12067</td>\n      <td>$67,000</td>\n      <td>67000</td>\n    </tr>\n  </tbody>\n</table>\n<p>87 rows × 9 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1619612355348
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 6 :  Visualise the data set (4 Marks)\n",
        "\n",
        "a) Using the 'Diploma Type' column, plot a bar chart and show its value counts."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (1)\n",
        "alumni[\"Diploma Type\"].value_counts().plot(kind=\"bar\")\n",
        "plt.xlabel('Diploma Type')\n",
        "plt.ylabel('Value Count')\n",
        "\n",
        "plt.title(' Bar chart Graph')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 21,
      "metadata": {
        "scrolled": false,
        "gather": {
          "logged": 1619612355829
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Now create a box plot comparison between 'Savings' and 'Salary' columns"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "#alumni.boxplot(by= 'Salary', column = ['Savings'], grid = False, vert=False)\n",
        "sns.boxplot(y= 'Salary', x='Savings', data=alumni, width=1, palette=\"colorblind\", linewidth=1.5,  orient=\"h\")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7fa86c97a978>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 22,
      "metadata": {
        "gather": {
          "logged": 1619612357444
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "c) Generate a histogram with the 'Salary' column and use 12 bins."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#c) (1)\n",
        "x = alumni[\"Salary\"]\n",
        "plt.hist(x, bins=12, histtype='bar', rwidth=0.8)\n",
        "plt.xlabel('Salary')\n",
        "plt.ylabel('Count')\n",
        "plt.title(' Grapg Histogram')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 23,
      "metadata": {
        "gather": {
          "logged": 1619612357868
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) Generate a scatter plot comparing 'Salary' and 'Savings' columns."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#d) (1)\n",
        "x = alumni.Salary\n",
        "y = alumni.Savings\n",
        "plt.scatter(x, y)\n",
        "plt.xlabel('Salary')\n",
        "plt.ylabel('Savings')\n",
        "plt.title(' Scatter Plot')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 24,
      "metadata": {
        "scrolled": true,
        "gather": {
          "logged": 1619612361811
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 7 :  Contingency Table (2 Marks)\n",
        "\n",
        "Using both the 'Martial Status' and 'Defaulted' create a contingency table. Hint: crosstab"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Q7 (2)\n",
        "pd.crosstab(alumni[\"Marital Status\"], alumni[\"Defaulted\"])"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "Defaulted       No  Yes\nMarital Status         \nDivorced         8   11\nMarried         19   16\nSingle           9   25",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Defaulted</th>\n      <th>No</th>\n      <th>Yes</th>\n    </tr>\n    <tr>\n      <th>Marital Status</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Divorced</th>\n      <td>8</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Married</th>\n      <td>19</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>Single</th>\n      <td>9</td>\n      <td>25</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1619612362210
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}